name: Transifex

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '.tx/config'
      - 'i18n/src/main/resources/**.properties'
  workflow_run:
    workflows: [ Build Bisq 2 ]
    types: [ completed ]

jobs:
  verify:
    name: Verify Transifex configuration
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Verify that .tx/config is in sync with the i18n folder
        run: |
          set -euo pipefail

          # Extract source files from .tx/config, trimming whitespace and de-duplicating
          config_files=$(grep -E '^[[:space:]]*source_file' .tx/config \
            | sed 's/.*= *//' \
            | sed 's|i18n/src/main/resources/||' \
            | sort -u)
          
          # Get actual source files from i18n directory (excluding locale-specific files)
          i18n_files=$(find i18n/src/main/resources -maxdepth 1 -name "*.properties" \
            | grep -v -E '(_[a-z]{2}(_[A-Z]{2})?|_pcm)\.properties$' \
            | sed 's|i18n/src/main/resources/||' \
            | sort -u)
          
          if [ "$config_files" != "$i18n_files" ]; then
            echo "::error::.tx/config is out of sync with i18n/src/main/resources/"
            echo "Please run the following command and commit the changes:"
            echo "./gradlew apps:desktop:i18n:updateTxConfig"
            diff -u <(echo "$config_files") <(echo "$i18n_files")
            exit 1
          fi
          echo ".tx/config is in sync with i18n/src/main/resources/"

  push:
    name: Push translation files to Transifex
    if: github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}
          # Fetch all history so we can check commits properly
          fetch-depth: 0

      - name: Check if the commit is in the main branch
        id: check_commit
        run: |
          git fetch origin main
          if git merge-base --is-ancestor ${{ github.event.workflow_run.head_sha }} origin/main; then
            echo "commit_in_main=true" >> $GITHUB_OUTPUT
          else
            echo "commit_in_main=false" >> $GITHUB_OUTPUT
          fi

      - name: "Check if TX_TOKEN secret exists"
        if: steps.check_commit.outputs.commit_in_main == 'true'
        env:
          transifex_secret: ${{ secrets.TX_TOKEN }}
        run: |
          if [ -z "$transifex_secret" ]; then
            echo "The secret \"TX_TOKEN\" has not been set; please go to \"settings > secrets and variables\" to create it"
            exit 1
          fi

      - name: Push changed files to Transifex
        if: steps.check_commit.outputs.commit_in_main == 'true'
        env:
          TX_TOKEN: ${{ secrets.TX_TOKEN }}
        run: |
          set -euo pipefail
          
          echo "Installing Transifex CLI..."
          # curl -sSL --fail https://raw.githubusercontent.com/transifex/cli/v1.6.17/install.sh | bash   # ‚Üê pin to a known tag / commit
          # Download installer and verify checksum before executing
          url=https://raw.githubusercontent.com/transifex/cli/v1.6.17/install.sh
          curl -sSL --fail "$url" -o install.sh
          echo "39fe480b525880aa842a097f8315100c3d5a19233a71befec904ce319205d392  install.sh" | sha256sum -c -
          bash install.sh
          # Optionally verify checksum:
          # echo "<expected-sha256>  install.sh" | sha256sum -c -
          echo "Finding changed files..."
          # Use git diff-tree for merge commits. The `^!` gets the combined diff against all parents.
          # This gives us the changes that were introduced by the merge.
          CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r ${{ github.event.workflow_run.head_sha }}^!)
          echo "Files changed in the merge:"
          echo "$CHANGED_FILES"
          
          # --- Handle SOURCE file pushes (-s) ---
          push_s_args=""
          if echo "${CHANGED_FILES}" | grep -q -x ".tx/config"; then
            echo "::notice:: .tx/config changed. Pushing all source files."
            push_s_args="-s"
          else
            CHANGED_SOURCE_FILES=$(echo "${CHANGED_FILES}" | grep -E 'i18n/src/main/resources/.*\.properties$' | grep -v -E '(_[a-z]{2}(_[A-Z]{2})?|_pcm)\.properties$' || true)
            if [ -n "$CHANGED_SOURCE_FILES" ]; then
              resources_found=false
              for file in $CHANGED_SOURCE_FILES; do
                # Find the resource slug for the source file
                resource_slug_line=$(awk -v file="$file" '
                  $0 ~ /^\[o:.*:p:.*:r:.*\]$/ {resource=$0}
                  $0 ~ ("source_file[[:space:]]*=[[:space:]]*" file "$") {print resource}
                ' .tx/config)
                
                if [[ -n "$resource_slug_line" ]] && [[ "$resource_slug_line" =~ ^\[o:.*:p:(.*):r:(.*)\]$ ]]; then
                  if ! $resources_found; then
                    push_s_args="-s"
                    resources_found=true
                  fi
                  project_slug="${BASH_REMATCH[1]}"
                  resource_slug="${BASH_REMATCH[2]}"
                  push_s_args="$push_s_args --resource ${project_slug}.${resource_slug}"
                else
                  echo "::warning::Could not find resource slug for changed source file: $file"
                fi
              done
            fi
          fi
          
          if [ -n "$push_s_args" ]; then
            echo "Pushing source files with args: $push_s_args"
            tx push $push_s_args --no-interactive
          else
            echo "No source files to push."
          fi

          # --- Handle TRANSLATION file pushes (-t) ---
          CHANGED_TRANSLATION_FILES=$(echo "${CHANGED_FILES}" | grep -E 'i18n/src/main/resources/.*\.properties$' | grep -E '(_[a-z]{2}(_[A-Z]{2})?|_pcm)\.properties$' || true)
          if [ -n "$CHANGED_TRANSLATION_FILES" ]; then
            echo "Found changed translation files to push:"
            echo "$CHANGED_TRANSLATION_FILES"
            for file in $CHANGED_TRANSLATION_FILES; do
              lang=$(echo "$file" | sed -E 's/.*_([a-z]{2}(_[A-Z]{2})?|pcm)\.properties$/\1/')
              
              # Find the resource for the translation file by matching the file_filter pattern
              resource_slug_line=$(awk -v file="$file" -v lang="$lang" '
                BEGIN{FS="="}
                $0 ~ /^\[o:.*:p:.*:r:.*\]$/ {resource=$0}
                $1 ~ /^[[:space:]]*file_filter/ {
                    # Build the expected filename from the pattern and the detected language
                    filter_path=$2;
                    gsub(/^[[:space:]]+|[[:space:]]+$/, "", filter_path); # trim whitespace
                    gsub(/<lang>/, lang, filter_path);
                    if (filter_path == file) {
                        print resource;
                        exit; # Exit after first match
                    }
                }
              ' .tx/config)

              if [[ -n "$resource_slug_line" ]] && [[ "$resource_slug_line" =~ ^\[o:.*:p:(.*):r:(.*)\]$ ]]; then
                project_slug="${BASH_REMATCH[1]}"
                resource_slug="${BASH_REMATCH[2]}"
                echo "Pushing translation for resource ${project_slug}.${resource_slug}, lang ${lang}"
                tx push -t -r "${project_slug}.${resource_slug}" -l "${lang}" --no-interactive
              else
                echo "::warning::Could not find resource slug for changed translation file: $file"
              fi
            done
          else
            echo "No translation files to push."
          fi
